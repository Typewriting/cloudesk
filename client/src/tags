!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC:=gcc$/;"	m
CC	test2/makefile	/^CC:=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS:=-g -Wall$/;"	m
CFLAGS	test2/makefile	/^CFLAGS:=-g -Wall$/;"	m
Compute_file_md5	md5.c	/^int Compute_file_md5(const char *file_path, char *md5_str)$/;"	f
Compute_file_md5	test2/md5.c	/^int Compute_file_md5(const char *file_path, char *md5_str)$/;"	f
ELF	Makefile	/^ELF:=client$/;"	m
ELF	test2/makefile	/^ELF:=out$/;"	m
GenerateStr	login.c	/^char *GenerateStr(char* str)$/;"	f
MD5Decode	md5.c	/^void MD5Decode(unsigned int *output, unsigned char *input, unsigned int len)$/;"	f
MD5Decode	test2/md5.c	/^void MD5Decode(unsigned int *output, unsigned char *input, unsigned int len)$/;"	f
MD5Encode	md5.c	/^void MD5Encode(unsigned char *output,unsigned int *input,unsigned int len)$/;"	f
MD5Encode	test2/md5.c	/^void MD5Encode(unsigned char *output,unsigned int *input,unsigned int len)$/;"	f
MD5Final	md5.c	/^void MD5Final(MD5_CTX *context, unsigned char digest[16])$/;"	f
MD5Final	test2/md5.c	/^void MD5Final(MD5_CTX *context, unsigned char digest[16])$/;"	f
MD5Init	md5.c	/^void MD5Init(MD5_CTX *context)$/;"	f
MD5Init	test2/md5.c	/^void MD5Init(MD5_CTX *context)$/;"	f
MD5Transform	md5.c	/^void MD5Transform(unsigned int state[4], unsigned char block[64])$/;"	f
MD5Transform	test2/md5.c	/^void MD5Transform(unsigned int state[4], unsigned char block[64])$/;"	f
MD5Update	md5.c	/^void MD5Update(MD5_CTX *context, unsigned char *input, unsigned int inputlen)$/;"	f
MD5Update	test2/md5.c	/^void MD5Update(MD5_CTX *context, unsigned char *input, unsigned int inputlen)$/;"	f
OBJS	Makefile	/^OBJS:=$(patsubst %.c,%.o,$(SRCS))$/;"	m
OBJS	test2/makefile	/^OBJS:=$(patsubst %.c,%.o,$(SRCS))$/;"	m
PADDING	md5.c	/^unsigned char PADDING[] =$/;"	v
PADDING	test2/md5.c	/^unsigned char PADDING[] =$/;"	v
SRCS	Makefile	/^SRCS:=$(wildcard *.c)$/;"	m
SRCS	test2/makefile	/^SRCS:=$(wildcard *.c)$/;"	m
client_login	login.c	/^int client_login(char* uname, int socketFd)$/;"	f
client_register	login.c	/^int client_register(int socketFd)$/;"	f
cmd2op	trans_cmd.c	/^int cmd2op(char* command)$/;"	f
cmd_cd	trans_cmd.c	/^int cmd_cd(int socketFd, char* cd_name, pathstr* ppath)$/;"	f
cmd_gets	trans_cmd.c	/^int cmd_gets(int socketFd, char* fname)$/;"	f
cmd_ls	trans_cmd.c	/^int cmd_ls(int socketFd)$/;"	f
cmd_puts	trans_cmd.c	/^int cmd_puts(int socketFd, char* fname)$/;"	f
cmd_pwd	trans_cmd.c	/^int cmd_pwd(pathstr path)$/;"	f
cmd_remove	trans_cmd.c	/^int cmd_remove(char* uname)$/;"	f
download	download.c	/^int download(int socketFd)$/;"	f
main	crypt_test/main.c	/^int main()$/;"	f
main	main.c	/^int main(int argc,char *argv[])$/;"	f
main	test2/main.c	/^int main(int argc, char *argv[])$/;"	f
print_help	trans_cmd.c	/^void print_help(){$/;"	f
read_cmd	trans_cmd.c	/^int read_cmd(int socketFd, pathstr* ppath)$/;"	f
recvCycle	recv_n.c	/^int recvCycle(int newFd,void *pStart,int len)$/;"	f
sigFunc	trans_file.c	/^void sigFunc(int signum)$/;"	f
tcp_init_client	tcp_init_client.c	/^int tcp_init_client(int *sfd,char *ip,char *port)$/;"	f
trans_file	trans_file.c	/^int trans_file(int socketFd, char *fname)$/;"	f
trans_reg	login.c	/^int trans_reg(int socketFd, train_reg t_reg)$/;"	f
trans_tag	trans_cmd.c	/^int trans_tag(int socketFd, int cmd_tag)$/;"	f
